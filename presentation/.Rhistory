install.packages("rmarkdown")
#install.packages("rjson")
library(rjson)
t <- rjson::fromJSON(file = '../outputs/turbo/carl_sagan.json')
t$segments[[1]]$avg_logprob
sapply(t$segments, function(x) { x$avg_logprob })
lp <- sapply(t$segments, function(x) { x$avg_logprob })
hist(lp)
hist(lp, breaks = 20)
t <- rjson::fromJSON(file = '../outputs/tiny/carl_sagan.json')
lp <- sapply(t$segments, function(x) { x$avg_logprob })
hist(lp, breaks = 20)
hist(lp, breaks = 20, xlim = c(-.3,0))
mtiny <- rjson::fromJSON(file = '../outputs/tiny/carl_sagan.json')
mturbo <- rjson::fromJSON(file='../outputs/turbo/carl_sagan.json)
mturbo <- rjson::fromJSON(file='../outputs/turbo/carl_sagan.json')
mtiny <- rjson::fromJSON(file = '../outputs/tiny/carl_sagan.json')
mturbo <- rjson::fromJSON(file='../outputs/turbo/carl_sagan.json')
mtiny <- rjson::fromJSON(file = '../outputs/tiny/carl_sagan.json')
mturbo <- rjson::fromJSON(file='../outputs/turbo/carl_sagan.json')
ptiny <- sapply(mtiny$segments, function(x) { x$avg_logprob })
pturbo <- sapply(mturbo$segments, function(x) { x$avg_logprob })
hist(ptiny, breaks = 20, xlim = c(-.3,0))
hist(pturbo, breaks = 20, xlim = c(-.3, -0.15))
hist(ptiny, breaks = 20, xlim = c(-.4, -0.1))
hist(pturbo, breaks = 20, xlim = c(-.4, -0.1))
max(ptiny) - min(ptiny)
(max(ptiny) - min(ptiny)) * 100
as.integer(max(ptiny) - min(ptiny)) * 100
as.integer((max(ptiny) - min(ptiny)) * 100)
as.integer((max(ptiny) - min(ptiny)) * 200)
rt <- read.table(file="../timings.txt")
rt <- read.table(file="../timings.txt", sep="x")
rt
rt <- read.table(file="../timings_cleaned.txt", sep="\t")
rt <- read.table(file="../timings_cleaned.txt", sep="\t")
rt
rt <- read.table(file="../timings_cleaned.txt", sep="\t", header = TRUE)
rt
barplot(rt)
rt <- read.table(file="../timings_cleaned.txt", sep="\t", header = TRUE, row.names = TRUE)
barplot(rt)
rt <- read.table(file="../timings_cleaned.txt", sep="\t", header = TRUE)
rownames(rt) <- rt$model
barplot(rt[,2:4])
rt[,2:4]
rt <- rt[,2:4]
sapply(rt, strsplit('m'))
sapply(rt, strsplit(split='m'))
sapply(rt, function(x) {strsplit(x, split='m')})
sapply(rt, function(x) {
ms <- strsplit(x, split='s')[[1]]
})
sapply(rt, function(x) {
ms <- strsplit(x, split='s')
})
sapply(rt, function(x) {
ms <- strsplit(x, split='s')
strsplit(ms, split='m')
})
sapply(rt, function(x) {
ms <- strsplit(x, split='s')
print(ms)
#strsplit(ms, split='m')
})
x <- rt[1,1]
x
#x <- rt[1,1]
ms <- strsplit(x, split='s')
ms
#x <- rt[1,1]
ms <- strsplit(x, split='s')[[1]]
strsplit(ms, split='m')
#x <- rt[1,1]
ms <- strsplit(x, split='s')[[1]]
strsplit(ms, split='m')
ms <- strsplit(ms, split='m')[[1]]
ms
ms[1] * 60 + ms[2]
as.integer(ms[1]) * 60 + as.numeric(ms[2])
as.numeric(ms[1]) * 60 + as.numeric(ms[2])
ms[1]
as.numeric(ms[1])
as.numeric(ms[1]) * 60
as.numeric(ms[2])
ms
ms[2]
as.numeric(ms[1]) * 60 + as.numeric(sub(',', replacement = '.', x = ms[2]))
sapply(rt, function(x) {
#x <- rt[1,1]
ms <- strsplit(x, split='s')[[1]]
ms <- strsplit(ms, split='m')[[1]]
as.numeric(ms[1]) * 60 + as.numeric(sub(',', replacement = '.', x = ms[2]))
})
sapply(rt, function(x) {
#x <- rt[1,1]
ms <- strsplit(x, split='s')
ms <- strsplit(ms, split='m')[[1]]
as.numeric(ms[1]) * 60 + as.numeric(sub(',', replacement = '.', x = ms[2]))
})
sapply(rt, function(x) {
#x <- rt[1,1]
sapply(strsplit(x, split='s'), function(ms) {
strsplit(ms, split='m')
#as.numeric(ms[1]) * 60 + as.numeric(sub(',', replacement = '.', x = ms[2]))
})
})
sapply(rt, function(x) {
#x <- rt[1,1]
sapply(strsplit(x, split='s'), function(ms) {
ms <- strsplit(ms, split='m')
as.numeric(ms[1]) * 60 + as.numeric(sub(',', replacement = '.', x = ms[2]))
})
})
sapply(rt, function(x) {
#x <- rt[1,1]
sapply(strsplit(x, split='s'), function(ms) {
ms <- strsplit(ms, split='m')
print(ms)
#as.numeric(ms[1]) * 60 + as.numeric(sub(',', replacement = '.', x = ms[2]))
})
})
sapply(rt, function(x) {
#x <- rt[1,1]
sapply(strsplit(x, split='s'), function(ms) {
ms <- strsplit(ms, split='m')
print(ms[1])
#as.numeric(ms[1]) * 60 + as.numeric(sub(',', replacement = '.', x = ms[2]))
})
})
sapply(rt, function(x) {
#x <- rt[1,1]
sapply(strsplit(x, split='s'), function(ms) {
ms <- strsplit(ms, split='m')[[1]]
print(ms)
#as.numeric(ms[1]) * 60 + as.numeric(sub(',', replacement = '.', x = ms[2]))
})
})
sapply(rt, function(x) {
#x <- rt[1,1]
sapply(strsplit(x, split='s'), function(ms) {
ms <- strsplit(ms, split='m')[[1]]
print(ms)
as.numeric(ms[1]) * 60 + as.numeric(sub(',', replacement = '.', x = ms[2]))
})
})
# convert XmYs to decimal seconds
mpt <- sapply(rt, function(x) {
#x <- rt[1,1]
sapply(strsplit(x, split='s'), function(ms) {
ms <- strsplit(ms, split='m')[[1]]
as.numeric(ms[1]) * 60 + as.numeric(sub(',', replacement = '.', x = ms[2]))
})
})
barplot(mpt)
barplot(t(mpt))
mpt
# convert XmYs to decimal seconds
mpt <- data.frame(sapply(rt, function(x) {
#x <- rt[1,1]
sapply(strsplit(x, split='s'), function(ms) {
ms <- strsplit(ms, split='m')[[1]]
as.numeric(ms[1]) * 60 + as.numeric(sub(',', replacement = '.', x = ms[2]))
})
}), row.names = rownames(rt))
barplot(t(mpt))
mpt
print(mpt)
plot(mpt$real)
barplot(mpt$real)
barplot(mpt$real, names.arg = rownames(rt))
mc <- read.table('../model_comparison.txt', sep=' ', header = TRUE)
mc
mc <- read.table('../model_comparison.txt', sep=' ', header = TRUE, na.strings = '-')
mc
print(mc, row.names = FALSE)
which( min(ptin))
which( min(ptiny))
which( min(ptiny) == ptiny)
which( min(ptiny) == ptiny)[1]
mtiny$segments[which( min(ptiny) == ptiny)[1]]
mtiny$segments[[which( min(ptiny) == ptiny)[1]]]
mtiny$segments[[which( min(ptiny) == ptiny)[1]]]$text
print(mturbo$segments[[which( min(pturbo) == pturbo)[1]]]$text)
print(mtiny$segments[[which( min(ptiny) == ptiny)]$text)
barplot(mpt$real, names.arg = rownames(rt), yaxt='n')
4*60 + 35
cs <- 4*60 + 35
(1:3)*cs
axis(2, at=(1:4)*cs, labels = 1:4)
barplot(mpt$real, names.arg = rownames(rt), yaxt='n')
cs <- 4*60 + 35
axis(2, at=(1:4)*cs, labels = 1:4)
axis(2, at=(0:4)*cs, labels = 0:4)
mtext(text = "Duration (multiple of source duration)", side = 2)
mtext(text = "Duration (multiple of source duration)", side = 2, line = 2)
barplot(mpt$real, names.arg = rownames(rt), yaxt='n')
cs <- 4*60 + 35
axis(2, at=(0:4)*cs, labels = 0:4)
mtext(text = "Duration (multiple of source duration)", side = 2, line = 2)
barplot(mpt$real, names.arg = rownames(rt), yaxt='n', xlab="Model")
mtext(text = "Duration (multiple of source duration)", side = 2, line = 2)
axis(2, at=(0:4)*cs, labels = 0:4)
mtext(text = "Duration (multiple of source duration)", side = 2, line = 3)
barplot(mpt$real, names.arg = rownames(rt), yaxt='n', xlab="Model", ylim=c(0,4*cs))
